syntax = "proto3";

package ark_wallet.v1;

import "ark_wallet/v1/types.proto";
import "google/api/annotations.proto";

service Service {
  // Balance returns offchain balance.
  rpc Balance(BalanceRequest) returns (BalanceResponse) {
    option (google.api.http) = {
      get: "/v1/balance"
    };
  };
  // Offboard asks to send requested amount to requested onchain address
  rpc Offboard(OffboardRequest) returns (OffboardResponse) {
    option (google.api.http) = {
      post: "/v1/offboard"
      body: "*"
    };
  };
  // Onboard returns onchain address and invoice for requested amount
  rpc Onboard(OnboardRequest) returns (OnboardResponse) {
    option (google.api.http) = {
      post: "/v1/onboard"
      body: "*"
    };
  };
  // Info returns info about the HD wallet.
  rpc Info(InfoRequest) returns (InfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  };
  // Receive requested amount on requested invoice.
  rpc Receive(ReceiveRequest) returns (ReceiveResponse) {
    option (google.api.http) = {
      post: "/v1/receive"
      body: "*"
    };
  };
  // Round returns round info for optional round_id
  rpc Round(RoundRequest) returns (RoundResponse) {
    option (google.api.http) = {
      get: "/v1/round/{round_id}"
    };
  };
  // Send requested amount to requested invoice.
  rpc Send(SendRequest) returns (SendResponse) {
    option (google.api.http) = {
      post: "/v1/send"
      body: "*"
    };
  };
  // Transactions returns virtual transactions history
  rpc Transactions(TransactionsRequest) returns (TransactionsResponse) {
    option (google.api.http) = {
      post: "/v1/transactions"
      body: "*"
    };
  };
}

message BalanceRequest {}
message BalanceResponse {
  uint64 amount = 1;
}

message InfoRequest {}
message InfoResponse {
  enum Network {
    NETWORK_UNSPECIFIED = 0;
    NETWORK_MAINNET = 1;
    NETWORK_TESTNET = 2;
    NETWORK_REGTEST = 3;
  }
  // the network of the wallet
  Network network = 1;
  // list containing info about the wallet accounts.
  AccountInfo account = 2;
  // info about the current version of the ark wallet.
  BuildInfo build_info = 3;
}

message ReceiveRequest {
  uint64 amount = 1;
  string invoice = 2;
}
message ReceiveResponse {
  string round_id = 1;
}

message RoundRequest {
  string round_id = 1;
}
message RoundResponse {
  Round round = 1;
}

message SendRequest {
  uint64 amount = 1;
  string invoice = 2;
}
message SendResponse {
  string round_id = 1;
}

message OffboardRequest {
  string address = 1;
  uint64 amount = 2;
}
message OffboardResponse {
  string round_id = 1;
}

message OnboardRequest {
  uint64 amount = 2;
}
message OnboardResponse {
  string address = 1;
  string invoice = 2;
}

message TransactionsRequest {}
message TransactionsResponse {
  repeated TransactionInfo transactions = 1;
}