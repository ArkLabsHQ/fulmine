// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: boltz_mock/v1/service.proto

package boltz_mockv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubmarineSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From            string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To              string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Invoice         string `protobuf:"bytes,3,opt,name=invoice,proto3" json:"invoice,omitempty"`
	PreimageHash    string `protobuf:"bytes,4,opt,name=preimage_hash,json=preimageHash,proto3" json:"preimage_hash,omitempty"`
	RefundPublicKey string `protobuf:"bytes,5,opt,name=refund_public_key,json=refundPublicKey,proto3" json:"refund_public_key,omitempty"` // not needed ?
	InvoiceAmount   uint64 `protobuf:"varint,6,opt,name=invoice_amount,json=invoiceAmount,proto3" json:"invoice_amount,omitempty"`        // not needed ?
}

func (x *SubmarineSwapRequest) Reset() {
	*x = SubmarineSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltz_mock_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmarineSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmarineSwapRequest) ProtoMessage() {}

func (x *SubmarineSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltz_mock_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmarineSwapRequest.ProtoReflect.Descriptor instead.
func (*SubmarineSwapRequest) Descriptor() ([]byte, []int) {
	return file_boltz_mock_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *SubmarineSwapRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SubmarineSwapRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SubmarineSwapRequest) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

func (x *SubmarineSwapRequest) GetPreimageHash() string {
	if x != nil {
		return x.PreimageHash
	}
	return ""
}

func (x *SubmarineSwapRequest) GetRefundPublicKey() string {
	if x != nil {
		return x.RefundPublicKey
	}
	return ""
}

func (x *SubmarineSwapRequest) GetInvoiceAmount() uint64 {
	if x != nil {
		return x.InvoiceAmount
	}
	return 0
}

type SubmarineSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // include claim pubkey
	ExpectedAmount uint64 `protobuf:"varint,2,opt,name=expected_amount,json=expectedAmount,proto3" json:"expected_amount,omitempty"`
	AcceptZeroConf bool   `protobuf:"varint,3,opt,name=accept_zero_conf,json=acceptZeroConf,proto3" json:"accept_zero_conf,omitempty"`
}

func (x *SubmarineSwapResponse) Reset() {
	*x = SubmarineSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltz_mock_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmarineSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmarineSwapResponse) ProtoMessage() {}

func (x *SubmarineSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltz_mock_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmarineSwapResponse.ProtoReflect.Descriptor instead.
func (*SubmarineSwapResponse) Descriptor() ([]byte, []int) {
	return file_boltz_mock_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *SubmarineSwapResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SubmarineSwapResponse) GetExpectedAmount() uint64 {
	if x != nil {
		return x.ExpectedAmount
	}
	return 0
}

func (x *SubmarineSwapResponse) GetAcceptZeroConf() bool {
	if x != nil {
		return x.AcceptZeroConf
	}
	return false
}

type ReverseSubmarineSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From          string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To            string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	PreimageHash  string `protobuf:"bytes,3,opt,name=preimage_hash,json=preimageHash,proto3" json:"preimage_hash,omitempty"`
	InvoiceAmount uint64 `protobuf:"varint,4,opt,name=invoice_amount,json=invoiceAmount,proto3" json:"invoice_amount,omitempty"`
	OnchainAmount uint64 `protobuf:"varint,5,opt,name=onchain_amount,json=onchainAmount,proto3" json:"onchain_amount,omitempty"`
	Address       string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ReverseSubmarineSwapRequest) Reset() {
	*x = ReverseSubmarineSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltz_mock_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseSubmarineSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseSubmarineSwapRequest) ProtoMessage() {}

func (x *ReverseSubmarineSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_boltz_mock_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseSubmarineSwapRequest.ProtoReflect.Descriptor instead.
func (*ReverseSubmarineSwapRequest) Descriptor() ([]byte, []int) {
	return file_boltz_mock_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReverseSubmarineSwapRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ReverseSubmarineSwapRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ReverseSubmarineSwapRequest) GetPreimageHash() string {
	if x != nil {
		return x.PreimageHash
	}
	return ""
}

func (x *ReverseSubmarineSwapRequest) GetInvoiceAmount() uint64 {
	if x != nil {
		return x.InvoiceAmount
	}
	return 0
}

func (x *ReverseSubmarineSwapRequest) GetOnchainAmount() uint64 {
	if x != nil {
		return x.OnchainAmount
	}
	return 0
}

func (x *ReverseSubmarineSwapRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ReverseSubmarineSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invoice         string `protobuf:"bytes,1,opt,name=invoice,proto3" json:"invoice,omitempty"`
	LockupAddress   string `protobuf:"bytes,2,opt,name=lockup_address,json=lockupAddress,proto3" json:"lockup_address,omitempty"`
	RefundPublicKey string `protobuf:"bytes,3,opt,name=refund_public_key,json=refundPublicKey,proto3" json:"refund_public_key,omitempty"`
}

func (x *ReverseSubmarineSwapResponse) Reset() {
	*x = ReverseSubmarineSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_boltz_mock_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseSubmarineSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseSubmarineSwapResponse) ProtoMessage() {}

func (x *ReverseSubmarineSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_boltz_mock_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseSubmarineSwapResponse.ProtoReflect.Descriptor instead.
func (*ReverseSubmarineSwapResponse) Descriptor() ([]byte, []int) {
	return file_boltz_mock_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReverseSubmarineSwapResponse) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

func (x *ReverseSubmarineSwapResponse) GetLockupAddress() string {
	if x != nil {
		return x.LockupAddress
	}
	return ""
}

func (x *ReverseSubmarineSwapResponse) GetRefundPublicKey() string {
	if x != nil {
		return x.RefundPublicKey
	}
	return ""
}

var File_boltz_mock_v1_service_proto protoreflect.FileDescriptor

var file_boltz_mock_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x5f, 0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x62,
	0x6f, 0x6c, 0x74, 0x7a, 0x5f, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x22, 0xcc, 0x01, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x15,
	0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5a, 0x65, 0x72, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x22, 0xce, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x75,
	0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x32, 0xda, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a,
	0x0d, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x23,
	0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x5f, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x5f, 0x6d, 0x6f, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53,
	0x77, 0x61, 0x70, 0x12, 0x2a, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x5f, 0x6d, 0x6f, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x5f, 0x6d, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xc2,
	0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x5f, 0x6d, 0x6f, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x72, 0x6b, 0x4c, 0x61, 0x62, 0x73, 0x48, 0x51, 0x2f, 0x61, 0x72, 0x6b, 0x2d, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x5f,
	0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6f, 0x6c, 0x74, 0x7a, 0x5f, 0x6d, 0x6f,
	0x63, 0x6b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x42, 0x6f, 0x6c,
	0x74, 0x7a, 0x4d, 0x6f, 0x63, 0x6b, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x42, 0x6f, 0x6c, 0x74,
	0x7a, 0x4d, 0x6f, 0x63, 0x6b, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x42, 0x6f, 0x6c, 0x74, 0x7a,
	0x4d, 0x6f, 0x63, 0x6b, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x42, 0x6f, 0x6c, 0x74, 0x7a, 0x4d, 0x6f, 0x63, 0x6b, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_boltz_mock_v1_service_proto_rawDescOnce sync.Once
	file_boltz_mock_v1_service_proto_rawDescData = file_boltz_mock_v1_service_proto_rawDesc
)

func file_boltz_mock_v1_service_proto_rawDescGZIP() []byte {
	file_boltz_mock_v1_service_proto_rawDescOnce.Do(func() {
		file_boltz_mock_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_boltz_mock_v1_service_proto_rawDescData)
	})
	return file_boltz_mock_v1_service_proto_rawDescData
}

var file_boltz_mock_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_boltz_mock_v1_service_proto_goTypes = []interface{}{
	(*SubmarineSwapRequest)(nil),         // 0: boltz_mock.v1.SubmarineSwapRequest
	(*SubmarineSwapResponse)(nil),        // 1: boltz_mock.v1.SubmarineSwapResponse
	(*ReverseSubmarineSwapRequest)(nil),  // 2: boltz_mock.v1.ReverseSubmarineSwapRequest
	(*ReverseSubmarineSwapResponse)(nil), // 3: boltz_mock.v1.ReverseSubmarineSwapResponse
}
var file_boltz_mock_v1_service_proto_depIdxs = []int32{
	0, // 0: boltz_mock.v1.Service.SubmarineSwap:input_type -> boltz_mock.v1.SubmarineSwapRequest
	2, // 1: boltz_mock.v1.Service.ReverseSubmarineSwap:input_type -> boltz_mock.v1.ReverseSubmarineSwapRequest
	1, // 2: boltz_mock.v1.Service.SubmarineSwap:output_type -> boltz_mock.v1.SubmarineSwapResponse
	3, // 3: boltz_mock.v1.Service.ReverseSubmarineSwap:output_type -> boltz_mock.v1.ReverseSubmarineSwapResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_boltz_mock_v1_service_proto_init() }
func file_boltz_mock_v1_service_proto_init() {
	if File_boltz_mock_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_boltz_mock_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmarineSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltz_mock_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmarineSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltz_mock_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseSubmarineSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_boltz_mock_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseSubmarineSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_boltz_mock_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_boltz_mock_v1_service_proto_goTypes,
		DependencyIndexes: file_boltz_mock_v1_service_proto_depIdxs,
		MessageInfos:      file_boltz_mock_v1_service_proto_msgTypes,
	}.Build()
	File_boltz_mock_v1_service_proto = out.File
	file_boltz_mock_v1_service_proto_rawDesc = nil
	file_boltz_mock_v1_service_proto_goTypes = nil
	file_boltz_mock_v1_service_proto_depIdxs = nil
}
