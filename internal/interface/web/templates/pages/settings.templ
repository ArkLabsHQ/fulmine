// Checked for accidental assignment (=) in if statements. No assignment found. If you see 'expected boolean expression, found assignment', check for '=' used in if/for/while instead of '=='.
package pages

import (
	"github.com/ArkLabsHQ/fulmine/internal/interface/web/templates/components"
	"github.com/ArkLabsHQ/fulmine/internal/core/domain"
)

templ Hr() {
  <hr class="border border-1 border-white/10 my-8 w-full"/>
}

templ Separator(text string) {
  <p class="uppercase text-sm text-white/50 my-4">{text}</p>
}

templ Status(ok bool, goodLabel, badLabel string, pointer bool) {
  <div class="flex">
    if ok {
      <p class="flex px-3 py-1 rounded-full bg-green/10 border border-1 border-green/50">
        <span class="text-green mr-2">&#9679;</span>
        {goodLabel}
      </p>
    } else {
      <p class="flex px-3 py-1 rounded-full bg-red/10 border border-1 border-red/50">
        <span class="text-red mr-2">&#9679;</span>
        {badLabel}
      </p>
    }
  </div>
}

templ StatusNode(connected bool) {
  @Status(connected, "Connected", "Disconnected", false)
}

templ StatusLock(locked bool) {
  @Status(!locked, "Unlocked", "Locked", true)
}

templ SettingsTab(text, path string, active bool) {
  <a href={templ.URL(path)}>
    <p class={"px-3", "py-2.5", "rounded-lg", templ.KV("bg-white", active), templ.KV("text-black", active)}>{text}</p>
  </a>
}

templ SettingsTabs(active string) {
  <div class="flex gap-2 mb-8 text-sm text-white/80 font-semibold">
    @SettingsTab("General", "/settings/general", active == "general")
    <!-- @SettingsTab("Server", "/settings/server", active == "server") // TODO: reactivate this -->
    @SettingsTab("Lightning", "/settings/lightning", active == "lightning")
  </div>
}

templ SettingsBodyContent(active string, settings domain.Settings, nodeStatus, locked bool, version, commit, buildDate, updateURL string) {
  @components.DesktopHeader()
	<div class="p-3 flex flex-col justify-between rounded-lg h-screen md:h-auto md:bg-desktopbg">
	  <div>
	    @components.Header("Settings")
      @SettingsTabs(active)
      if active == "general" {
        @SettingsGeneralContent(settings, nodeStatus, locked, version, commit, buildDate, updateURL)
      }
      if active == "server" {
        @SettingsServerContent(settings)
      }
      if active == "lightning" {
        @SettingsLightningContent(settings, nodeStatus)
      }
    </div>
  </div>
}

templ SettingsGeneralContent(settings domain.Settings, nodeStatus, locked bool, version, commit, buildDate, updateURL string) {
  <form hx-post="/helpers/settings" hx-trigger="change">
    @Separator("Details")
    @components.Label("Bitcoin unit")
    @components.SelectDropdown("unit", settings.Unit, ([][]string{
      {"sat", "Satoshi (0.00000001 BTC)"},
      {"btc", "Bitcoin (100.000.000 SATS)"},
    }))
    @components.Label("Reference currency")
    @components.SelectDropdown("currency", settings.Currency, ([][]string{
      {"usd", "USD ($)"},
      {"eur", "EURO (â‚¬)"},
    }))
    @components.Label("Server URL")
    @components.InputFake(settings.ServerUrl)
    @Hr()
    @Separator("Wallet status")
    @StatusLock(locked)
    @Hr()
    @components.Label("Release Info")
    <div class="flex flex-col gap-1 mb-2 mt-2">
      <div class="flex gap-2 items-center">
        <span class="text-white/60 w-24">Version:</span>
        <span class="text-white/90 font-mono">{version}</span>
      </div>
      <div class="flex gap-2 items-center">
        <span class="text-white/60 w-24">Commit:</span>
        <span class="text-white/90 font-mono">{commit}</span>
      </div>
      <div class="flex gap-2 items-center mb-2">
        <span class="text-white/60 w-24">Build Date:</span>
        <span class="text-white/90 font-mono">{buildDate}</span>
      </div>
      <div style="display:block;width:auto;">
      if updateURL == "" {
        <a class="button button-inline opacity-50 cursor-not-allowed" id="update-btn" aria-disabled="true" style="pointer-events: none; display:inline-block !important; width:auto !important; min-width:0 !important; max-width:none !important;">Update</a>
      } else {
        <a class="button button-inline" id="update-btn" onclick="handleBinaryUpdate(event)" style="display:inline-block !important; width:auto !important; min-width:0 !important; max-width:none !important;">Update</a>
      }
      </div>
      <span id="update-message" class="text-sm text-white/70"></span>
    </div>
    <script>
      function handleBinaryUpdate(event) {
        event.preventDefault();
        const btn = document.getElementById('update-btn');
        btn.disabled = true;
        const msg = document.getElementById('update-message');
        msg.innerText = 'Updating...';
        fetch('/helpers/update', { method: 'POST' })
          .then(res => res.text())
          .then(text => {
            msg.innerText = text;
            btn.disabled = false;
          })
          .catch(err => {
            msg.innerText = 'Update failed: ' + err;
            btn.disabled = false;
          });
      }
    </script>
    @Hr()
    @Separator("Security")
    <a class="button" onclick="redirect('/backup')">Backup Private Key</a>
    @Separator("Sign out")
    <a class="button" onclick="redirect('/lock')">Sign out</a>
  </form>
}

templ SettingsServerContent(settings domain.Settings) {
  <form hx-post="/helpers/settings" hx-trigger="change">
    @Separator("Link")
    @components.Label("Server Link")
    <div class="border border-1 border-white/50 flex bg-graybg items-center justify-between rounded-lg gap-4 pr-3 focus:border-orange">
      <input
        class="border-0 bg-graybg p-4 rounded-lg text-white/50 focus:text-white max-w-96"
        id="serverlink"
        name="serverlink"
        value={settings.ApiRoot}>
      <div class="cursor-pointer flex items-center gap-4 text-white/50">
        @components.PasteWidget("serverlink")
        @components.ScanWidget("serverlink")
      </div>
    </div>
    @Hr()
    @Separator("Host settings")
    @components.Label("Server Host")
    @components.InputGeneric("serverhost", "", settings.ApiRoot)
    @components.Label("Server Port")
    @components.InputGeneric("serverport", "", settings.ApiRoot)
    @components.Label("Server API Root")
    @components.InputGeneric("serverapihost", "", settings.ApiRoot)
  </form>
}

templ SettingsLightningContent(settings domain.Settings, nodeStatus bool) {
  <form hx-post="/helpers/settings" hx-trigger="change">
    @Separator("Status")
    @StatusNode(nodeStatus)
    @Hr()
    @Separator("Connect")
    <p>Enter details manually or scan to connect</p>
    @components.Label("URL")
    if nodeStatus {
      @components.InputFake(settings.LnUrl)
      <button class="bg-red/10 text-red font-semibold rounded-lg mt-8" hx-post="/helpers/node/disconnect">
        Disconnect
      </button>
    } else {
      @components.InputWithPaste("lnurl", "", settings.LnUrl)
      @Hr()
      <div class="flex items-start gap-4 max-w-96">
        <p class="mt-1">@components.InfoLightIcon()</p>
        <div>
          <p class="mb-2">Connect to you own LN node to rebalance your channels with low fees and faster settlements</p>
          <p>How to connect? <a hx-get="/modal/lnconnectinfo" hx-target="#modal" class="visible">View guide</a></p>
        </div>
      </div>
      @Hr()
      @components.LnConnectButtons("lnurl")
    }
  </form>
  <script>
    const input = document.querySelector('#lnurl')
    const button = document.querySelector('[name="connect"]')
		const validateLnUrl = () => {
      if (input.value.length == 0) return
		  const data = new FormData()
		  data.set('lnurl', input.value)
		  fetch('/helpers/lnurl/validate', {
		  	method: 'POST',
        body: data,
		  }).then((res) => {
		  	if (res.ok) {
		  		res.json().then(({ valid }) => {
		  			if (valid) {
		  				button.disabled = false
		  				button.innerText = 'Connect'
		  			} else {
		  				button.disabled = true
		  				button.innerText = 'Invalid URL'
		  			}
		  		})
		  	}
		  })
		}
    if (input && button) {
			validateLnUrl()
		  input.addEventListener('change', validateLnUrl)
		}
  </script>
}